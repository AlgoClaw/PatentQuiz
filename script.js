(function(){function randomString$$module$build$utils$random(a=6){let b="";for(;b.length<a;)b+=Math.random().toString(36).substring(2);return b.substring(0,a)}function random$$module$build$utils$random(a){return(1664525*parseInt(a,36)+1013904223)%2**32}
function shuffle$$module$build$utils$random(a,b=randomString$$module$build$utils$random(),c=!1){a=c?a:[...a];for(c=a.length-1;0<c;c--){const d=Math.floor(random$$module$build$utils$random(b)*(c+1))%a.length;[a[c],a[d]]=[a[d],a[c]];b=random$$module$build$utils$random(b).toString(36).substring(0,b.length)}return a}var module$build$utils$random={};module$build$utils$random.random=random$$module$build$utils$random;module$build$utils$random.randomString=randomString$$module$build$utils$random;
module$build$utils$random.shuffle=shuffle$$module$build$utils$random;class CheckboxFactory$$module$build$components$checkbox_factory{constructor(a=null,b=null){this.checkboxProperties=null!==a&&void 0!==a?a:{};this.labelProperties=null!==b&&void 0!==b?b:{}}createCheckboxElement(a){const b=document.createElement("input");Object.assign(b,this.checkboxProperties);b.type="checkbox";b.id=`checkbox-${randomString$$module$build$utils$random(10)}`;b.classList.add(...CheckboxFactory$$module$build$components$checkbox_factory.checkboxClassNames);b.value=a;return b}createLabel(a,
b){const c=document.createElement("label");Object.assign(c,this.labelProperties);c.htmlFor=b.id;c.innerText=a;c.classList.add(...CheckboxFactory$$module$build$components$checkbox_factory.labelClassNames);return c}createCheckboxContainer(a,b){const c=document.createElement("div");c.classList.add(...CheckboxFactory$$module$build$components$checkbox_factory.containerClassNames);a=this.createCheckboxElement(a);b=this.createLabel(b,a);c.appendChild(a);c.appendChild(b);return c}}
CheckboxFactory$$module$build$components$checkbox_factory.checkboxClassNames=[];CheckboxFactory$$module$build$components$checkbox_factory.labelClassNames=["w-full","py-3","ml-2","text-sm","font-medium"];CheckboxFactory$$module$build$components$checkbox_factory.containerClassNames=["flex","items-center","pl-3"];var $jscompDefaultExport$$module$build$components$checkbox_factory=CheckboxFactory$$module$build$components$checkbox_factory,module$build$components$checkbox_factory={};
module$build$components$checkbox_factory.default=$jscompDefaultExport$$module$build$components$checkbox_factory;class ElementClass$$module$build$components$element_class{getElementById(a,b=null){const c=document.getElementById(a);if(!c)throw Error(`Could not find ${null!==b&&void 0!==b?b:a} element with id: ${a}`);return c}querySelector(a,b=null){const c=document.querySelector(a);if(!c)throw Error(`Could not find ${null!==b&&void 0!==b?b:a} element with selector: ${a}`);return c}querySelectorAll(a,b=null){const c=document.querySelectorAll(a);if(0===c.length)throw Error(`Could not find ${null!==b&&void 0!==
b?b:a} element with selector: ${a}`);return c}}var module$build$components$element_class={};module$build$components$element_class.default=ElementClass$$module$build$components$element_class;const ERROR_CONTAINER_CLASSES$$module$build$components$errors=["border","border-red-500"],ERROR_MESSAGE_CLASS_IDENTIFIER$$module$build$components$errors="error-message",ERROR_MESSAGE_CLASSES$$module$build$components$errors=[ERROR_MESSAGE_CLASS_IDENTIFIER$$module$build$components$errors,"text-red-500","text-xs","mt-1","pl-3"],ERROR_MESSAGE_SELECTOR$$module$build$components$errors=`p.${ERROR_MESSAGE_CLASS_IDENTIFIER$$module$build$components$errors}`;
function getErrorMessages$$module$build$components$errors(a,b){return Array.from(a.querySelectorAll(ERROR_MESSAGE_SELECTOR$$module$build$components$errors)).filter(c=>void 0===b||c.innerText===b)}
function showError$$module$build$components$errors(a,b){a.classList.add(...ERROR_CONTAINER_CLASSES$$module$build$components$errors);if(!getErrorMessages$$module$build$components$errors(a,b).length){var c=document.createElement("p");c.innerText=b;c.classList.add(...ERROR_MESSAGE_CLASSES$$module$build$components$errors);a.appendChild(c)}}
function removeErrors$$module$build$components$errors(a,b){a.classList.remove(...ERROR_CONTAINER_CLASSES$$module$build$components$errors);getErrorMessages$$module$build$components$errors(a,b).forEach(c=>c.remove())}var module$build$components$errors={};module$build$components$errors.removeErrors=removeErrors$$module$build$components$errors;module$build$components$errors.showError=showError$$module$build$components$errors;function uploadButton$$module$build$components$file_load(a){const b=document.createElement("button");b.textContent="Upload";b.classList.add("btn","btn-primary","btn-sm");b.addEventListener("click",()=>{const c=document.createElement("input");c.setAttribute("type","file");c.setAttribute("accept",".json");c.addEventListener("change",()=>{var d;const e=null===(d=c.files)||void 0===d?void 0:d[0];if(e){const f=new FileReader;f.addEventListener("load",()=>{try{a(JSON.parse(f.result))}catch(g){console.log(g)}});
f.readAsText(e)}});c.click()});return b}async function uploadJson$$module$build$components$file_load(){const a=document.createElement("input");a.setAttribute("type","file");a.setAttribute("accept",".json");return new Promise(b=>{a.onchange=()=>{var c;const d=null===(c=a.files)||void 0===c?void 0:c[0];if(d){const e=new FileReader;e.onload=()=>{try{b(JSON.parse(e.result))}catch(f){console.log(f)}};e.readAsText(d)}};a.click()})}
function offerDownload$$module$build$components$file_load(a,b){var c="text/plain";"object"===typeof a&&(a=JSON.stringify(a,null,2),c="application/json");a=new Blob([a],{type:c});a=URL.createObjectURL(a);c=document.createElement("a");c.setAttribute("href",a);c.setAttribute("download",b);c.style.display="none";document.body.appendChild(c);c.click();document.body.removeChild(c)}
function downloadButton$$module$build$components$file_load(a,b){const c=document.createElement("button");c.textContent="Download";c.addEventListener("click",()=>offerDownload$$module$build$components$file_load(a(),b));return c}var module$build$components$file_load={};module$build$components$file_load.offerDownload=offerDownload$$module$build$components$file_load;module$build$components$file_load.uploadJson=uploadJson$$module$build$components$file_load;function updateTextToFraction$$module$build$components$progress(a,b){a&&b||console.error("Could not update progress bar text. One or more elements were null: ",a,b);b.innerText=`${a.value}/${a.max}`}
function createProgressBar$$module$build$components$progress(a,b){const c=document.querySelector(a),d=document.querySelector(b);if(!c)throw Error(`Could not find progress bar element with selector: ${a}`);if(!d)throw Error(`Could not find progress text element with selector: ${b}`);const e=(f,g)=>{if("number"!==typeof g)console.error(`Progress bar ${f} must be a number. Received: `,g);else try{c[f]=g,updateTextToFraction$$module$build$components$progress(c,d)}catch(k){console.error(`Error setting progress bar ${f}: `,
k)}};return{get value(){return c.value},set value(f){e("value",f)},get max(){return c.max},set max(f){e("max",f)},incrementProgress:()=>{c.value+=1;updateTextToFraction$$module$build$components$progress(c,d)}}}var module$build$components$progress={};module$build$components$progress.default=createProgressBar$$module$build$components$progress;var $jscompDefaultExport$$module$build$config={version:"0.1.0",dataUrl:"quiz.json",userSettings:{theme:"dark",autoSave:!1,hotkeys:{next:["ArrowRight","Enter"," "],previous:["ArrowLeft"],guesses:["numeric","alpha"],answerCount:5}},defaultUserSettings:{theme:"dark",autoSave:!1,hotkeys:{next:["ArrowRight","Enter"," "],previous:["ArrowLeft"],guesses:["numeric","alpha"],answerCount:5}},pages:{loading:{title:"div#loading-page h1",message:"div#loading-page p",details:"#loading-details"},setup:{form:"form#quiz-setup",
categoryCheckboxContainer:"div#categories-checkboxes",selectNoneButton:"button#select-none",selectAllButton:"button#select-all",shuffleQuestions:'input[name="shuffleQuestions"][type="checkbox"]',shuffleAnswers:'input[name="shuffleAnswers"][type="checkbox"]'},question:{progressBar:"progress#quiz-progress-bar",progressBarText:"#quiz-progress-text",questionText:"p.question-text",questionId:"#question-id",nextButton:"button#next-button",previousButton:"button#previous-button",answerButtons:"button[id^=answer-]"},
results:{statsCategories:"#stats-categories-text",statsQuestions:"#stats-questions-text",statsCorrect:"#stats-correct-text",statsScore:"#stats-score-text",newQuizButton:"button#new-quiz-button",redoQuizButton:"button#redo-quiz-button",redoWrongButton:"button#redo-wrong-button"}}},module$build$config={};module$build$config.default=$jscompDefaultExport$$module$build$config;class AnswerShuffler$$module$build$utils$shuffle_answers{static set answerKeys(a){this._answerKeys=a;this.rewriteAnswerRegex=new RegExp("(?<=\\()("+a.join("|")+")(?=\\))","g")}static get answerKeys(){return this._answerKeys}constructor(a){this.seed=a}shuffleAnswers(a,b){if(!AnswerShuffler$$module$build$utils$shuffle_answers.isShuffleAble(a))return{answers:a,key:b};if(!AnswerShuffler$$module$build$utils$shuffle_answers.allowRewrite)return this.answerShuffleNoRewrite(a,b);throw Error("Not implemented");
}answerShuffleNoRewrite(a,b){const c=a[b],d=a.map((f,g)=>g).filter(f=>!AnswerShuffler$$module$build$utils$shuffle_answers.isPositionalAnswer(a[f]));shuffle$$module$build$utils$random(d,this.seed,!0);b=a.map((f,g)=>a[d[g]]||f);const e=b.findIndex(f=>f===c);if(0>e||e>=b.length)throw Error("Could not find answer key");return{answers:b,key:e}}static answerRequiresRewrite(a){return AnswerShuffler$$module$build$utils$shuffle_answers.rewriteAnswerRegex.test(a)}static isPositionalAnswer(a){return/of the (?:above|below)/i.test(a)}static isShuffleAble(a){if(!AnswerShuffler$$module$build$utils$shuffle_answers.allowRewrite&&
a.some(b=>AnswerShuffler$$module$build$utils$shuffle_answers.answerRequiresRewrite(b))||2>a.length)return!1;a=a.map(b=>AnswerShuffler$$module$build$utils$shuffle_answers.isPositionalAnswer(b)?"1":"0").join("");return/^1*00+1*$/.test(a)}static rewriteAnswer(a,b){const c=new RegExp("(?<=\\()("+Object.keys(b).join("|")+")(?=\\))","g");return a.replace(c,d=>b[d])}static applySwapValues(a,b,c){for(const [d,e]of Object.entries(c))b[d]=a[e];return b}static symmetricDifference(a,b){a=new Set(a);for(let c of b)a.has(c)?
a.delete(c):a.add(c);return a}static invertDict(a){return Object.fromEntries(Object.entries(a).map(([b,c])=>[c,b]))}static swapValues(a,b,c=!0){if(!Object.keys(b).every(f=>f in a))throw Error("mapping contains keys that are not in the object");const d=Array.from(new Set(Object.values(b))),e=Array.from(new Set(Object.keys(b)));if(0!==AnswerShuffler$$module$build$utils$shuffle_answers.symmetricDifference(new Set(d),new Set(e)).size)throw Error("mapping contains duplicate values");return Object.entries(b).every(([f,
g])=>a[f]===a[g])?a:c?AnswerShuffler$$module$build$utils$shuffle_answers.applySwapValues({...a},a,b):AnswerShuffler$$module$build$utils$shuffle_answers.applySwapValues(a,{...a},b)}}AnswerShuffler$$module$build$utils$shuffle_answers.rewriteAnswerRegex=new RegExp(/\([A-E]\)/,"g");AnswerShuffler$$module$build$utils$shuffle_answers._answerKeys=["A","B","C","D","E"];AnswerShuffler$$module$build$utils$shuffle_answers.allowRewrite=!1;
var $jscompDefaultExport$$module$build$utils$shuffle_answers=AnswerShuffler$$module$build$utils$shuffle_answers,module$build$utils$shuffle_answers={};module$build$utils$shuffle_answers.default=$jscompDefaultExport$$module$build$utils$shuffle_answers;class QuestionNavigator$$module$build$quiz$question_navigator{get index(){return this._index}set index(a){if(0>a||a>=this.ids.length)throw Error("Index out of bounds");this._index=a}constructor(a){this.ids=a;this._index=0}get length(){return this.ids.length}get id(){return 0>this._index?null:this.ids[this._index]}set id(a){this._index=this.find(a)}move(a,b=null){a=this.find(b)+a;if(0>a||a>=this.ids.length)return null;this._index=a;return this.ids[this._index]}hasNext(){return this.index<this.ids.length-
1}next(a=null){return this.move(1,a)}previous(a=null){return this.move(-1,a)}find(a=null){if(null===a)return this._index;a=this.ids.indexOf(a);if(-1===a)throw Error("ID not found");return a}}var module$build$quiz$question_navigator={};module$build$quiz$question_navigator.default=QuestionNavigator$$module$build$quiz$question_navigator;class ResultManager$$module$build$quiz$quiz_stats{constructor(a){this.startTimestamp=Date.now();this._endTimestamp=null;this.guesses={};a&&(this.startTimestamp=a.startTimestamp,a.endTimestamp&&(this._endTimestamp=a.endTimestamp),this.guesses=a.guesses)}recordGuesses(a,b){this.guesses[a]=b}getGuesses(a){return this.guesses[a]}end(){this._endTimestamp=Date.now();return{startTimestamp:this.startTimestamp,endTimestamp:this._endTimestamp,guesses:this.guesses}}set endTimestamp(a){this._endTimestamp=a}get endTimestamp(){if(null===
this._endTimestamp)throw Error("Quiz not finished");return this._endTimestamp}getResults(){return{startTimestamp:this.startTimestamp,endTimestamp:this.endTimestamp,guesses:this.guesses}}incorrectIds(){return Object.entries(ResultManager$$module$build$quiz$quiz_stats.correctFirstGuessDict(this.guesses)).reduce((a,[b,c])=>{c||a.push(b);return a},[])}correctIds(){return Object.entries(ResultManager$$module$build$quiz$quiz_stats.correctFirstGuessDict(this.guesses)).reduce((a,[b,c])=>{c&&a.push(b);return a},
[])}static correctFirstGuessDict(a){return Object.entries(a).reduce((b,[c,d])=>{b[c]=1===d.filter(e=>e).length;return b},{})}questionCount(){return Object.keys(this.guesses).length}}var module$build$quiz$quiz_stats={};module$build$quiz$quiz_stats.default=ResultManager$$module$build$quiz$quiz_stats;class Quiz$$module$build$quiz$quiz{get AnswerShuffler(){null===this._AnswerShuffler&&(this._AnswerShuffler=new $jscompDefaultExport$$module$build$utils$shuffle_answers(this.seed));return this._AnswerShuffler}static loadQuiz({questions:a,categories:b,version:c}){Quiz$$module$build$quiz$quiz.quizQuestions=a;Quiz$$module$build$quiz$quiz.quizCategories=b;Quiz$$module$build$quiz$quiz.quizVersion=c;Quiz$$module$build$quiz$quiz._quizLoaded()}static get isLoaded(){return!!Quiz$$module$build$quiz$quiz.quizQuestions&&
!!Quiz$$module$build$quiz$quiz.quizCategories}static async quizLoaded(){return new Promise((a,b)=>{Quiz$$module$build$quiz$quiz.isLoaded?a():Quiz$$module$build$quiz$quiz._quizLoaded=a})}static getQuestionIds(a){return a.flatMap(b=>Quiz$$module$build$quiz$quiz.quizCategories[b])}static buildQuizCategoryLookup(){if(!Quiz$$module$build$quiz$quiz.isLoaded)throw Error("Quiz not loaded");Quiz$$module$build$quiz$quiz.quizCategoryLookup=Object.fromEntries(Object.entries(Quiz$$module$build$quiz$quiz.quizCategories).flatMap(([a,
b])=>b.map(c=>[c,a])));if(!Quiz$$module$build$quiz$quiz.quizCategoryLookup||0===Object.keys(Quiz$$module$build$quiz$quiz.quizCategoryLookup).length)throw Error("Quiz category lookup failed");}static getQuestionCategory(a){Quiz$$module$build$quiz$quiz.quizCategoryLookup||Quiz$$module$build$quiz$quiz.buildQuizCategoryLookup();return Quiz$$module$build$quiz$quiz.quizCategoryLookup[a]}static get categories(){return Object.keys(Quiz$$module$build$quiz$quiz.quizCategories)}static getQuestion(a){return Quiz$$module$build$quiz$quiz.quizQuestions[a]}static getMaxAnswerCount(){return Math.max(...Object.values(Quiz$$module$build$quiz$quiz.quizQuestions).map(a=>
a.answers.length))||5}constructor({settings:a,results:b}){var c;this._AnswerShuffler=null;this.settings=a;b||(this.settings.version=Quiz$$module$build$quiz$quiz.quizVersion);this.resultManager=new ResultManager$$module$build$quiz$quiz_stats(b);a=null!==(c=this.settings.ids)&&void 0!==c?c:Quiz$$module$build$quiz$quiz.getQuestionIds(this.settings.categories);this.settings.shuffleQuestions&&shuffle$$module$build$utils$random(a,this.seed,!0);this.questionNavigator=new QuestionNavigator$$module$build$quiz$question_navigator(a);
this.attemptQuizResume();Quiz$$module$build$quiz$quiz.quizInProgress=this}endResults(){Quiz$$module$build$quiz$quiz.quizInProgress=null;return{settings:this.settings,results:this.resultManager.end()}}attemptQuizResume(){this.questionNavigator.index=Object.keys(this.resultManager.guesses).length}recordGuesses(a){const b=this.questionNavigator.id;if(null===b)throw Error("No current question");this.resultManager.recordGuesses(b,a)}get seed(){if(null===this.settings.seed||void 0===this.settings.seed)this.settings.seed=
randomString$$module$build$utils$random();return this.settings.seed}get index(){return this.questionNavigator.index}async previous(){return new Promise((a,b)=>{try{a(this.previousSync())}catch(c){b(c)}})}previousSync(a=null){a=this.questionNavigator.previous(a);if(null===a)throw Error("No previous question");return this.modifyQuestion(Quiz$$module$build$quiz$quiz.getQuestion(a))}async next(){return new Promise((a,b)=>{try{a(this.nextSync())}catch(c){b(c)}})}nextSync(a=null){a=this.questionNavigator.next(a);
if(null===a)throw Error("No next question");return this.modifyQuestion(Quiz$$module$build$quiz$quiz.getQuestion(a))}modifyQuestion(a){this.settings.shuffleAnswers&&(a={...a,...this.AnswerShuffler.shuffleAnswers(a.answers,a.key)});return this.addIndex(this.addGuesses(a))}addGuesses(a){const b=this.resultManager.getGuesses(a.id);b&&(a.guesses=b);return a}addIndex(a){a.index=this.questionNavigator.index;return a}current(){if(null===this.questionNavigator.id)throw Error("No current question");return this.modifyQuestion(Quiz$$module$build$quiz$quiz.getQuestion(this.questionNavigator.id))}}
Quiz$$module$build$quiz$quiz.quizCategoryLookup=null;Quiz$$module$build$quiz$quiz.quizVersion="0.0.0";Quiz$$module$build$quiz$quiz.quizInProgress=null;Quiz$$module$build$quiz$quiz._quizLoaded=()=>{};var $jscompDefaultExport$$module$build$quiz$quiz=Quiz$$module$build$quiz$quiz,module$build$quiz$quiz={};module$build$quiz$quiz.default=$jscompDefaultExport$$module$build$quiz$quiz;var Page$$module$build$pages$page_manager;(function(a){a.Loading="loading-page";a.Setup="setup-page";a.Question="question-page";a.Results="results-page"})(Page$$module$build$pages$page_manager||={});
class PageClass$$module$build$pages$page_manager extends ElementClass$$module$build$components$element_class{constructor(a){super();this.page=a;PageClass$$module$build$pages$page_manager.instances.set(a,this)}toggle(a){const b=document.getElementById(this.page);b&&b.classList.toggle("hidden",!a)}show(){PageClass$$module$build$pages$page_manager.instances.forEach(a=>{a.toggle(a===this)})}isActivePage(){const a=document.getElementById(this.page);return a?!a.classList.contains("hidden"):!1}}
PageClass$$module$build$pages$page_manager.instances=new Map;PageClass$$module$build$pages$page_manager.Page=Page$$module$build$pages$page_manager;var $jscompDefaultExport$$module$build$pages$page_manager=PageClass$$module$build$pages$page_manager,module$build$pages$page_manager={};module$build$pages$page_manager.default=$jscompDefaultExport$$module$build$pages$page_manager;class LoadingPage$$module$build$pages$loading_page extends $jscompDefaultExport$$module$build$pages$page_manager{constructor({title:a,message:b,details:c}){super($jscompDefaultExport$$module$build$pages$page_manager.Page.Loading);this._title=this.querySelector(a,"title");this._message=this.querySelector(b,"message");this._details=this.querySelector(c,"details")}set title(a){this._title.innerText=a}get title(){return this._title.innerText}set message(a){this._message.innerText=a}get message(){return this._message.innerText}set details(a){this._details.innerText=
a}get details(){return this._details.innerText}update({title:a,message:b,details:c}){a&&(this.title=a);b&&(this.message=b);c&&(this.details=c)}}var $jscompDefaultExport$$module$build$pages$loading_page=new LoadingPage$$module$build$pages$loading_page($jscompDefaultExport$$module$build$config.pages.loading),module$build$pages$loading_page={};module$build$pages$loading_page.default=$jscompDefaultExport$$module$build$pages$loading_page;const QUIZ_QUESTION_KEYS$$module$build$quiz$question_validator=["id","question","answers","key"];function objectWithKeys$$module$build$quiz$question_validator(a,b){return"object"!==typeof a||null===a?!1:b.every(c=>c in a)&&Object.keys(a).length===b.length}function isNonEmptyString$$module$build$quiz$question_validator(a){return"string"===typeof a&&0<a.length}function validateId$$module$build$quiz$question_validator(a){return isNonEmptyString$$module$build$quiz$question_validator(a)}
function validateQuestion$$module$build$quiz$question_validator(a){return isNonEmptyString$$module$build$quiz$question_validator(a)}function validateUniqueAnswers$$module$build$quiz$question_validator(a){return a.length===(new Set(a)).size}function validateAnswers$$module$build$quiz$question_validator(a){return Array.isArray(a)&&0<a.length&&5>=a.length&&a.every(b=>isNonEmptyString$$module$build$quiz$question_validator(b))&&validateUniqueAnswers$$module$build$quiz$question_validator(a)}
function validateKey$$module$build$quiz$question_validator(a,b){return"number"===typeof a&&0<=a&&a<b.length}
function isQuizQuestion$$module$build$quiz$question_validator(a){return objectWithKeys$$module$build$quiz$question_validator(a,[...QUIZ_QUESTION_KEYS$$module$build$quiz$question_validator])&&validateId$$module$build$quiz$question_validator(a.id)&&validateQuestion$$module$build$quiz$question_validator(a.question)&&validateAnswers$$module$build$quiz$question_validator(a.answers)&&validateKey$$module$build$quiz$question_validator(a.key,a.answers)}var module$build$quiz$question_validator={};
module$build$quiz$question_validator.isQuizQuestion=isQuizQuestion$$module$build$quiz$question_validator;function validateCategory$$module$build$quiz$quiz_parser(a){return Array.isArray(a)&&0<a.length}
function parseQuizCategories$$module$build$quiz$quiz_parser(a){if("object"!==typeof a||null===a)throw Error("Quiz categories are in unexpected format");if(0===Object.keys(a).length)throw Error("Quiz must have at least one category");return Object.keys(a).reduce((b,c)=>{if(!validateCategory$$module$build$quiz$quiz_parser(a[c]))throw Error(`Category ${c} is in unexpected format or is empty`);b[c]=a[c].map(d=>d.id);return b},{})}
function parseQuizQuestions$$module$build$quiz$quiz_parser(a){return Object.values(a).flatMap(b=>b).reduce((b,c)=>{if(c.id in b)throw Error(`Duplicate question id: ${c.id}`);if(!isQuizQuestion$$module$build$quiz$question_validator(c))throw Error(`Invalid question format: ${JSON.stringify(c)}`);b[c.id]=c;return b},{})}function isQuizDBDownloadFormat$$module$build$quiz$quiz_parser(a){return"object"===typeof a&&null!==a&&"version"in a&&"categories"in a}
function parseQuizDownload$$module$build$quiz$quiz_parser(a){if(!isQuizDBDownloadFormat$$module$build$quiz$quiz_parser(a))throw Error("Quiz data is in unexpected format");return{version:a.version,categories:parseQuizCategories$$module$build$quiz$quiz_parser(a.categories),questions:parseQuizQuestions$$module$build$quiz$quiz_parser(a.categories)}}var module$build$quiz$quiz_parser={};module$build$quiz$quiz_parser.default=parseQuizDownload$$module$build$quiz$quiz_parser;async function fetchQuizData$$module$build$quiz$quiz_downloader(a){a=await fetch(a);if(!a.ok)throw Error(`HTTP error! status: ${a.status}`);return a.json()}function handleQuizDataError$$module$build$quiz$quiz_downloader(a,b){console.error(a);$jscompDefaultExport$$module$build$pages$loading_page.update({title:"Error",message:b,details:`${a}`})}
async function getQuizData$$module$build$quiz$quiz_downloader(a){$jscompDefaultExport$$module$build$pages$loading_page.show();try{const b=await fetchQuizData$$module$build$quiz$quiz_downloader(a);try{return parseQuizDownload$$module$build$quiz$quiz_parser(b)}catch(c){throw handleQuizDataError$$module$build$quiz$quiz_downloader(c,"Unable to parse quiz data"),c;}}catch(b){throw handleQuizDataError$$module$build$quiz$quiz_downloader(b,`Could not load quiz data from ${a}`),b;}}
var module$build$quiz$quiz_downloader={};module$build$quiz$quiz_downloader.default=getQuizData$$module$build$quiz$quiz_downloader;class QuestionPageDom$$module$build$pages$question_page extends $jscompDefaultExport$$module$build$pages$page_manager{constructor(a){super($jscompDefaultExport$$module$build$pages$page_manager.Page.Question);this.key=-1;this.answerButtonElements=this.querySelectorAll(a.answerButtons,"answer buttons");this.nextButtonElement=this.querySelector(a.nextButton,"next button");this.previousButtonElement=this.querySelector(a.previousButton,"previous button");this.questionTextElement=this.querySelector(a.questionText,
"question text");this.questionId=this.querySelector(a.questionId,"question ID");this.quizProgress=createProgressBar$$module$build$components$progress(a.progressBar,a.progressBarText);this.answerButtonElements.forEach((b,c)=>{this.resetAnswer(b);b.onclick=this.handleGuess.bind(this,b,c)});this.nextButtonElement.onclick=this.handleNext.bind(this);this.previousButtonElement.onclick=this.handlePrevious.bind(this)}set question(a){this.questionTextElement.innerText=a}get question(){return this.questionTextElement.innerText}set id(a){this.questionTextElement.setAttribute(QuestionPageDom$$module$build$pages$question_page.DATA_QUESTION_ID,
a);this.questionTextElement.id=a;this.questionId.innerText=a;window.location.hash=a}get id(){const a=this.questionTextElement.getAttribute(QuestionPageDom$$module$build$pages$question_page.DATA_QUESTION_ID);if(null===a)throw Error("Question ID not set");return a}set index(a){this.quizProgress.value=a+1;this.previousButtonElement.disabled=0===a;this.nextButtonElement.innerText=this.hasNext()?"Next":"Finish"}set questionsCount(a){this.quizProgress.max=a}get questionsCount(){return this.quizProgress.max}get answers(){return Array.from(this.answerButtonElements).map(a=>
a.innerText)}resetAnswer(a){a.removeAttribute(QuestionPage$$module$build$pages$question_page.DATA_CORRECT);a.removeAttribute(QuestionPage$$module$build$pages$question_page.DATA_GUESSED)}set answers(a){this.answerButtonElements.forEach((b,c)=>{var d;this.resetAnswer(b);const e=void 0===a||void 0===a[c];b.disabled=e;b.innerText=null!==(d=a[c])&&void 0!==d?d:"";b.classList.toggle("hidden",e)})}assign(a){this.question=a.question;this.id=a.id;this.key=a.key;try{if(2>a.answers.length||null===a.key||void 0===
a.key||!a.answers[a.key]||a.key>this.answerButtonElements.length-1)this.nextButtonElement.disabled=!1;1===a.answers.length&&"[click here to proceed]"===a.answers[0]?(this.nextButtonElement.disabled=!1,this.answers=[]):this.answers=a.answers}catch(b){console.error(b),this.nextButtonElement.disabled=!1}void 0!==a.index&&(this.index=a.index);void 0!==a.guesses&&(this.guesses=a.guesses)}hasNext(){return this.quizProgress.value<this.quizProgress.max}handleGuess(a,b){a.disabled=!0;this.nextButtonElement.disabled&&
(a.setAttribute(QuestionPage$$module$build$pages$question_page.DATA_GUESSED,""),b===this.key&&(this.nextButtonElement.disabled=!1,a.setAttribute(QuestionPage$$module$build$pages$question_page.DATA_CORRECT,"")))}handleNext(){this.nextButtonElement.disabled=!0}handlePrevious(){this.nextButtonElement.disabled=!0}get guesses(){return Array.from(this.answerButtonElements).map(a=>a.hasAttribute(QuestionPage$$module$build$pages$question_page.DATA_GUESSED))}set guesses(a){a.forEach((b,c)=>{b&&c!==this.key&&
this.guess(c)});a[this.key]&&this.guess(this.key)}next(){this.nextButtonElement.click()}previous(){this.previousButtonElement.click()}guess(a){(a=this.answerButtonElements[a])&&a.click()}}QuestionPageDom$$module$build$pages$question_page.DATA_QUESTION_ID="data-question-id";QuestionPageDom$$module$build$pages$question_page.DATA_CORRECT="data-correct";QuestionPageDom$$module$build$pages$question_page.DATA_GUESSED="data-guessed";QuestionPageDom$$module$build$pages$question_page.minAnswerButtons=5;
class QuestionPage$$module$build$pages$question_page extends QuestionPageDom$$module$build$pages$question_page{constructor(a){super(a)}async onFinished(){return new Promise(a=>{this._onFinished=a})}handleNext(){super.handleNext();if(!this.hasNext())window.location.hash="",this._onFinished&&this._onFinished();else if(this.onNext)this.onNext(this.id,this.guesses)}handlePrevious(){super.handlePrevious();if(this.onPrevious)this.onPrevious(this.id,this.guesses)}handleGuess(a,b){super.handleGuess(a,b);
if(this.onGuess)this.onGuess(this.id,b);if(b===this.key&&this.onCorrectGuess)this.onCorrectGuess(this.id,this.guesses)}}var $jscompDefaultExport$$module$build$pages$question_page=new QuestionPage$$module$build$pages$question_page($jscompDefaultExport$$module$build$config.pages.question),module$build$pages$question_page={};module$build$pages$question_page.default=$jscompDefaultExport$$module$build$pages$question_page;class ResultsPage$$module$build$pages$results_page extends $jscompDefaultExport$$module$build$pages$page_manager{constructor(a){super($jscompDefaultExport$$module$build$pages$page_manager.Page.Results);this.statsCategories=this.querySelector(a.statsCategories,"stats categories");this.statsQuestions=this.querySelector(a.statsQuestions,"stats questions");this.statsCorrect=this.querySelector(a.statsCorrect,"stats correct");this.statsScore=this.querySelector(a.statsScore,"stats score");this.newQuizButton=
this.querySelector(a.newQuizButton,"new quiz button");this.redoQuizButton=this.querySelector(a.redoQuizButton,"redo quiz button");this.redoWrongButton=this.querySelector(a.redoWrongButton,"redo wrong button");this.showResults=this.showResults.bind(this)}set categories(a){this.statsCategories.innerText=3<a.length?a.length.toString():a.join(", ")}set questionsCount(a){this.statsQuestions.innerText=a.toString()}set correctCount(a){this.statsCorrect.innerText=a.toString()}async showResults({settings:a,
results:b}){const c=new ResultManager$$module$build$quiz$quiz_stats(b);b=c.questionCount();const d=b-c.incorrectIds().length;this.correctCount=d;this.categories=a.categories;b&&(this.statsScore.innerText=Number(d/b).toLocaleString(void 0,{style:"percent",minimumFractionDigits:1}));this.questionsCount=b;this.show();return new Promise((e,f)=>{this.redoQuizButton.onclick=()=>{e({settings:{...a,seed:void 0},results:void 0})};this.redoWrongButton.onclick=()=>{e({settings:{...a,seed:void 0,ids:c.incorrectIds()},
results:void 0})};this.newQuizButton.onclick=()=>e(null)})}}var $jscompDefaultExport$$module$build$pages$results_page=new ResultsPage$$module$build$pages$results_page($jscompDefaultExport$$module$build$config.pages.results),module$build$pages$results_page={};module$build$pages$results_page.default=$jscompDefaultExport$$module$build$pages$results_page;class SetupPage$$module$build$pages$setup_page extends $jscompDefaultExport$$module$build$pages$page_manager{constructor(a){super($jscompDefaultExport$$module$build$pages$page_manager.Page.Setup);this.categoryName="categories";this.categorySelector=`input[type="checkbox"][name="${this.categoryName}"]`;this.submitCallback=()=>{};this.form=this.querySelector(a.form,"form");this.categoryCheckboxContainer=this.querySelector(a.categoryCheckboxContainer,"categoryCheckboxContainer");this.selectNoneButton=
this.querySelector(a.selectNoneButton,"selectNoneButton");this.selectAllButton=this.querySelector(a.selectAllButton,"selectAllButton");this.shuffleQuestions=this.querySelector(a.shuffleQuestions,"shuffleQuestions");this.shuffleAnswers=this.querySelector(a.shuffleAnswers,"shuffleAnswers");this.categoryCheckboxFactory=new $jscompDefaultExport$$module$build$components$checkbox_factory({defaultChecked:!1,checked:!1,name:this.categoryName});this.submitCallback=this.submitCallback.bind(this);this.selectAllButton.onclick=
this.checkAllCategories.bind(this);this.selectNoneButton.onclick=this.uncheckAllCategories.bind(this);this.getInstructions=this.getInstructions.bind(this);this.form.onsubmit=this.submit.bind(this)}show(){removeErrors$$module$build$components$errors(this.categoryCheckboxContainer);super.show()}getCheckedCategoryCheckboxes(){return this.categoryCheckboxContainer.querySelectorAll(`${this.categorySelector}:checked`)}getUncheckedCategoryCheckboxes(){return this.categoryCheckboxContainer.querySelectorAll(`${this.categorySelector}:not(:checked)`)}getCategoryCheckboxes(){return this.categoryCheckboxContainer.querySelectorAll(this.categorySelector)}checkAllCategories(){this.getUncheckedCategoryCheckboxes().forEach(a=>
a.checked=!0)}uncheckAllCategories(){this.getCheckedCategoryCheckboxes().forEach(a=>a.checked=!1)}get selectedCategories(){return Array.from(this.getCheckedCategoryCheckboxes()).map(a=>a.value)}set selectedCategories(a){this.getCategoryCheckboxes().forEach(b=>{b.checked=a.includes(b.value)})}get categories(){return Array.from(this.getCategoryCheckboxes()).map(a=>a.value)}set categories(a){const b=this.categories,c=a.filter(e=>!b.includes(e)),d=b.filter(e=>!a.includes(e));c.forEach(e=>{e=this.categoryCheckboxFactory.createCheckboxContainer(e,
e);this.categoryCheckboxContainer.appendChild(e)});d.forEach(e=>{(e=this.categoryCheckboxContainer.querySelector(`input[type="checkbox"][name="categories"][value="${e}"]`))&&this.categoryCheckboxContainer.removeChild(e)})}submit(a){a.preventDefault();0===this.selectedCategories.length?showError$$module$build$components$errors(this.categoryCheckboxContainer,"Please select at least one category"):this.submitCallback()}get settings(){return{shuffleAnswers:this.shuffleAnswers.checked,shuffleQuestions:this.shuffleQuestions.checked,
categories:this.selectedCategories}}async getInstructions(a){if((null===a||void 0===a?0:a.settings.ids)&&0<a.settings.ids.length)return a;this.categories=$jscompDefaultExport$$module$build$quiz$quiz.categories;if(null===a||void 0===a?0:a.settings)this.selectedCategories=a.settings.categories,this.shuffleQuestions.checked=a.settings.shuffleQuestions,this.shuffleAnswers.checked=a.settings.shuffleAnswers;this.show();return new Promise((b,c)=>{this.submitCallback=()=>{b({settings:this.settings})}})}}
var $jscompDefaultExport$$module$build$pages$setup_page=new SetupPage$$module$build$pages$setup_page($jscompDefaultExport$$module$build$config.pages.setup),module$build$pages$setup_page={};module$build$pages$setup_page.default=$jscompDefaultExport$$module$build$pages$setup_page;const ALPHABET_KEYS$$module$build$quiz$hotkeys="abcdefghijklmnopqrstuvwxyz",NUMERIC_KEYS$$module$build$quiz$hotkeys="123456789";
class Hotkeys$$module$build$quiz$hotkeys{constructor({next:a,previous:b,guesses:c,answerCount:d}){this.enabled=!1;this.hotkeyActions={};this._next=a;this._previous=b;this._guesses=c;this._answerCount=d}updateProperty(a,b,c){a!==b&&(c(a),this.enabled&&this.build())}set next(a){this.updateProperty(a,this._next,b=>this._next=b)}set previous(a){this.updateProperty(a,this._previous,b=>this._previous=b)}set guesses(a){this.updateProperty(a,this._guesses,b=>this._guesses=b)}set answerCount(a){this.updateProperty(a,
this._answerCount,b=>this._answerCount=b)}build(){this.hotkeyActions={};this._next.forEach(a=>{this.hotkeyActions[a]=$jscompDefaultExport$$module$build$pages$question_page.next.bind($jscompDefaultExport$$module$build$pages$question_page)});this._previous.forEach(a=>{this.hotkeyActions[a]=$jscompDefaultExport$$module$build$pages$question_page.previous.bind($jscompDefaultExport$$module$build$pages$question_page)});this._guesses.forEach(a=>{this.buildGuessKeys(a).forEach((b,c)=>{this.hotkeyActions[b]=
$jscompDefaultExport$$module$build$pages$question_page.guess.bind($jscompDefaultExport$$module$build$pages$question_page,c)})})}buildGuessKeys(a){switch(a){case "alpha":return this._buildGuessKeys(ALPHABET_KEYS$$module$build$quiz$hotkeys,this._answerCount);case "numeric":return this._buildGuessKeys(NUMERIC_KEYS$$module$build$quiz$hotkeys,this._answerCount);default:throw Error(`Invalid guess type: ${a}`);}}_buildGuessKeys(a,b){b=Math.min(b,a.length);return a.split("").slice(0,b+1)}hotkeyEvent(a){a.shiftKey||
a.ctrlKey||a.altKey||a.metaKey||!this.hotkeyActions[a.key]||(" "===a.key&&a.preventDefault(),this.hotkeyActions[a.key]())}enable(){this.enabled||(0===Object.keys(this.hotkeyActions).length&&this.build(),0!==Object.keys(this.hotkeyActions).length&&(this.enabled=!0,document.addEventListener("keydown",this.hotkeyEvent.bind(this))))}disable(){document.removeEventListener("keydown",this.hotkeyEvent.bind(this));this.enabled=!1}}
var $jscompDefaultExport$$module$build$quiz$hotkeys=new Hotkeys$$module$build$quiz$hotkeys($jscompDefaultExport$$module$build$config.userSettings.hotkeys),module$build$quiz$hotkeys={};module$build$quiz$hotkeys.default=$jscompDefaultExport$$module$build$quiz$hotkeys;async function startQuiz$$module$build$quiz$quiz_controller({settings:a,results:b}){return runThisQuiz$$module$build$quiz$quiz_controller(new $jscompDefaultExport$$module$build$quiz$quiz({settings:a,results:b}))}function questionHandler$$module$build$quiz$quiz_controller(a){$jscompDefaultExport$$module$build$pages$question_page.assign(a)}
async function runThisQuiz$$module$build$quiz$quiz_controller(a){$jscompDefaultExport$$module$build$quiz$hotkeys.enable();$jscompDefaultExport$$module$build$pages$question_page.questionsCount=a.questionNavigator.length;$jscompDefaultExport$$module$build$pages$question_page.onCorrectGuess=(b,c)=>a.recordGuesses(c);$jscompDefaultExport$$module$build$pages$question_page.onNext=()=>a.next().then(questionHandler$$module$build$quiz$quiz_controller);$jscompDefaultExport$$module$build$pages$question_page.onPrevious=
()=>a.previous().then(questionHandler$$module$build$quiz$quiz_controller);questionHandler$$module$build$quiz$quiz_controller(a.current());$jscompDefaultExport$$module$build$pages$question_page.show();return new Promise((b,c)=>{$jscompDefaultExport$$module$build$pages$question_page.onFinished().then(()=>{$jscompDefaultExport$$module$build$quiz$hotkeys.disable();b(a.endResults())})})}
async function runQuiz$$module$build$quiz$quiz_controller(a){$jscompDefaultExport$$module$build$quiz$quiz.quizInProgress&&runThisQuiz$$module$build$quiz$quiz_controller($jscompDefaultExport$$module$build$quiz$quiz.quizInProgress).then($jscompDefaultExport$$module$build$pages$results_page.showResults).then(runQuiz$$module$build$quiz$quiz_controller);$jscompDefaultExport$$module$build$pages$setup_page.getInstructions(a).then(startQuiz$$module$build$quiz$quiz_controller).then($jscompDefaultExport$$module$build$pages$results_page.showResults).then(runQuiz$$module$build$quiz$quiz_controller)}
var module$build$quiz$quiz_controller={};module$build$quiz$quiz_controller.default=runQuiz$$module$build$quiz$quiz_controller;class LocalStorageBase$$module$build$quiz$quiz_storage{hasItem(a){return null!==localStorage.getItem(a)}getItem(a,b=null){a=localStorage.getItem(a);return null===a?b:JSON.parse(a)}setItem(a,b){localStorage.setItem(a,JSON.stringify(b))}removeItem(a){localStorage.removeItem(a)}pushItem(a,b){const c=this.getItem(a,[]);c.push(b);this.setItem(a,c);return c}popItem(a,b=null){const c=this.getItem(a,b);if(!Array.isArray(c)||0===c.length)return b;b=c.pop();this.setItem(a,c);return b}}
class MemoryStorageBase$$module$build$quiz$quiz_storage{constructor(){this.storage={}}hasItem(a){return void 0!==this.storage[a]}getItem(a,b=null){a=this.storage[a];return void 0===a?b:a}setItem(a,b){this.storage[a]=b}removeItem(a){delete this.storage[a]}pushItem(a,b){const c=this.getItem(a,[]);c.push(b);this.setItem(a,c);return c}popItem(a,b=null){const c=this.getItem(a,b);if(!Array.isArray(c)||0===c.length)return b;b=c.pop();this.setItem(a,c);return b}}var StorageType$$module$build$quiz$quiz_storage;
(function(a){a[a.Local=0]="Local";a[a.Memory=1]="Memory"})(StorageType$$module$build$quiz$quiz_storage||={});
class QuizStorage$$module$build$quiz$quiz_storage{constructor(a){if(void 0===a||null===a){a=new LocalStorageBase$$module$build$quiz$quiz_storage;if(a.hasItem(QuizStorage$$module$build$quiz$quiz_storage.userConfigKey)){this.storageBase=a;return}a=StorageType$$module$build$quiz$quiz_storage.Memory}switch(a){case StorageType$$module$build$quiz$quiz_storage.Local:this.storageBase=new LocalStorageBase$$module$build$quiz$quiz_storage;break;case StorageType$$module$build$quiz$quiz_storage.Memory:this.storageBase=
new MemoryStorageBase$$module$build$quiz$quiz_storage;break;default:if("function"===typeof(null===a||void 0===a?void 0:a.getItem)&&"function"===typeof(null===a||void 0===a?void 0:a.hasItem)&&"function"===typeof(null===a||void 0===a?void 0:a.setItem)&&"function"===typeof(null===a||void 0===a?void 0:a.removeItem))this.storageBase=a;else throw Error(`Invalid storage type: ${a}`);}}get quizHistory(){return this.storageBase.getItem(QuizStorage$$module$build$quiz$quiz_storage.quizHistoryKey,[])}set quizHistory(a){this.storageBase.setItem(QuizStorage$$module$build$quiz$quiz_storage.quizHistoryKey,
a)}get userConfig(){return this.storageBase.getItem(QuizStorage$$module$build$quiz$quiz_storage.userConfigKey,{})}set userConfig(a){this.storageBase.setItem(QuizStorage$$module$build$quiz$quiz_storage.userConfigKey,a)}purge(){this.quizHistory.forEach(a=>{this.storageBase.removeItem(a)});this.storageBase.removeItem(QuizStorage$$module$build$quiz$quiz_storage.quizHistoryKey);this.storageBase.removeItem(QuizStorage$$module$build$quiz$quiz_storage.userConfigKey)}getUserStorage(){const a=this.quizHistory;
return{quizHistory:a,userConfig:this.userConfig,...Object.fromEntries(a.map(b=>[b,this.getHistoryId(b)]).filter(b=>null!==b))}}getHistoryId(a){return this.storageBase.getItem(a,null)}getHistoryIndex(a){a=this.quizHistory[a];return void 0===a?null:this.getHistoryId(a)}getHistory(a){return"number"===typeof a?this.getHistoryIndex(a):this.getHistoryId(a)}}QuizStorage$$module$build$quiz$quiz_storage.userConfigKey="userConfig";QuizStorage$$module$build$quiz$quiz_storage.quizHistoryKey="quizHistory";
var $jscompDefaultExport$$module$build$quiz$quiz_storage=new QuizStorage$$module$build$quiz$quiz_storage,module$build$quiz$quiz_storage={};module$build$quiz$quiz_storage.QuizStorage=QuizStorage$$module$build$quiz$quiz_storage;module$build$quiz$quiz_storage.StorageType=StorageType$$module$build$quiz$quiz_storage;module$build$quiz$quiz_storage.default=$jscompDefaultExport$$module$build$quiz$quiz_storage;function isObject$$module$build$utils$dict_merging(a){return a&&"object"===typeof a&&!Array.isArray(a)}function merge$$module$build$utils$dict_merging(a,...b){return b.reduce(recursiveMerge$$module$build$utils$dict_merging,a)}
function recursiveMerge$$module$build$utils$dict_merging(a,b){if(!isObject$$module$build$utils$dict_merging(a)||!isObject$$module$build$utils$dict_merging(b))return b;const c=Object.assign({},a);for(const d in b)isObject$$module$build$utils$dict_merging(b[d])?d in a?c[d]=recursiveMerge$$module$build$utils$dict_merging(a[d],b[d]):Object.assign(c,{[d]:b[d]}):Object.assign(c,{[d]:b[d]});return c}
const output$$module$build$utils$dict_merging=recursiveMerge$$module$build$utils$dict_merging({theme:"dark",autoSave:!1,hotkeys:{next:["ArrowRight","Enter"," "],previous:["ArrowLeft"],guesses:["numeric","alpha"],answerCount:5}},{hotkeys:{next:["a"]}});
function recursiveDiff$$module$build$utils$dict_merging(a,b){if(a!==b){if(!isObject$$module$build$utils$dict_merging(a)||!isObject$$module$build$utils$dict_merging(b))return b;var c={};for(let d in b)if(d in a){let e=recursiveDiff$$module$build$utils$dict_merging(a[d],b[d]);void 0!==e&&(c[d]=e)}else c[d]=b[d];return 0===Object.keys(c).length?void 0:c}}var module$build$utils$dict_merging={};module$build$utils$dict_merging.merge=merge$$module$build$utils$dict_merging;
module$build$utils$dict_merging.recursiveDiff=recursiveDiff$$module$build$utils$dict_merging;module$build$utils$dict_merging.recursiveMerge=recursiveMerge$$module$build$utils$dict_merging;function buildSingleQuestionQuiz$$module$build$main(a){if(!$jscompDefaultExport$$module$build$quiz$quiz.getQuestion(a))throw Error(`Could not find question ${a}`);const b=$jscompDefaultExport$$module$build$quiz$quiz.getQuestionCategory(a);if(!b)throw Error(`Could not find category for question ${a}`);return{settings:{categories:[b],shuffleQuestions:!1,shuffleAnswers:!1,ids:[a]}}}
function onhashchange$$module$build$main(){const a=window.location.hash.slice(1).split("?")[0];if(a&&!$jscompDefaultExport$$module$build$quiz$quiz.quizInProgress&&$jscompDefaultExport$$module$build$quiz$quiz.isLoaded)try{runQuiz$$module$build$quiz$quiz_controller(buildSingleQuestionQuiz$$module$build$main(a))}catch(b){document.getElementById(a)||(window.location.hash="",console.error(b))}}
function installServiceWorker$$module$build$main(){"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("service-worker.js").then(a=>{console.log("ServiceWorker registration successful with scope: ",a.scope)},a=>{console.log("ServiceWorker registration failed: ",a)})})}
window.onload=async()=>{if(!$jscompDefaultExport$$module$build$quiz$quiz.isLoaded){$jscompDefaultExport$$module$build$quiz$quiz.isLoaded||await getQuizData$$module$build$quiz$quiz_downloader($jscompDefaultExport$$module$build$config.dataUrl).then($jscompDefaultExport$$module$build$quiz$quiz.loadQuiz);if(!$jscompDefaultExport$$module$build$quiz$quiz.quizInProgress){$jscompDefaultExport$$module$build$config.userSettings=recursiveMerge$$module$build$utils$dict_merging($jscompDefaultExport$$module$build$quiz$quiz_storage.userConfig,
$jscompDefaultExport$$module$build$config.defaultUserSettings);const a=$jscompDefaultExport$$module$build$quiz$quiz_storage.getHistory(-1);a&&a.results&&new $jscompDefaultExport$$module$build$quiz$quiz(a)}onhashchange$$module$build$main();runQuiz$$module$build$quiz$quiz_controller(null)}};var module$build$main={};function*itemGenerator$$module$build$quiz$question_generator(a,b=Object.keys(a),c){for(var d=null!==c&&void 0!==c?c:0;;)switch(c=yield a[b[d]],c){case void 0:d<b.length-1&&d++;break;case "previous":0<d&&d--;break;case null:break;default:if(d=b.indexOf(c),-1===d)throw Error(`item ${c} not found in ${b}`);}}var module$build$quiz$question_generator={};module$build$quiz$question_generator.default=itemGenerator$$module$build$quiz$question_generator;var module$build$types$hotkey_types={};var module$build$types$quiz_types={};var module$build$types$index={};function boolArrayToInt$$module$build$utils$convert(a){return pack$$module$build$utils$convert(a.map(b=>b?"1":"0").join(""))}function intToBoolArray$$module$build$utils$convert(a){return unpack$$module$build$utils$convert(a).split("").map(b=>"1"===b)}function pack$$module$build$utils$convert(a){a=a.match(/.{1,16}/g);return null===a?"":a.map(b=>String.fromCharCode(parseInt(b,2))).join("")}
function unpack$$module$build$utils$convert(a){return a.split("").map(b=>b.charCodeAt(0).toString(2)).join("")}var module$build$utils$convert={};module$build$utils$convert.boolArrayToInt=boolArrayToInt$$module$build$utils$convert;module$build$utils$convert.intToBoolArray=intToBoolArray$$module$build$utils$convert;module$build$utils$convert.pack=pack$$module$build$utils$convert;module$build$utils$convert.unpack=unpack$$module$build$utils$convert;const PREVIOUS$$module$build$utils$item_generator=Symbol("previous");function*_itemGenerator$$module$build$utils$item_generator(a,b=Object.keys(a),c,d=!1){for(c=null!==c&&void 0!==c?c:0;c<b.length&&0<=c;){const e=yield d?{...a[b[c]],index:c}:a[b[c]];switch(e){case void 0:c++;break;case PREVIOUS$$module$build$utils$item_generator:c--;break;case null:break;default:if(c=b.indexOf(e),-1===c)throw Error(`item ${e} not found in keys: ${b.join(", ")}`);}}}
function itemGenerator$$module$build$utils$item_generator(a,b=Object.keys(a),c){const d=_itemGenerator$$module$build$utils$item_generator(a,b,c);return{next:()=>d.next(),previous:()=>d.next(PREVIOUS$$module$build$utils$item_generator),find:e=>d.next(e),current:()=>d.next(null)}}var module$build$utils$item_generator={};module$build$utils$item_generator.default=itemGenerator$$module$build$utils$item_generator;function isPositionalAnswer$$module$build$utils$old_shuffle_answers(a){return/of the (?:above|below)/i.test(a)}function isShuffleAble$$module$build$utils$old_shuffle_answers(a){if(2>a.length)return!1;a=a.map(b=>isPositionalAnswer$$module$build$utils$old_shuffle_answers(b)?"1":"0").join("");return/^1*00+1*$/.test(a)}function rewriteAnswer$$module$build$utils$old_shuffle_answers(a,b){const c=new RegExp("(?<=\\()("+Object.keys(b).join("|")+")(?=\\))","g");return a.replace(c,d=>b[d])}
class AnswerShuffler$$module$build$utils$old_shuffle_answers{static set answerKeys(a){this._answerKeys=a;this.rewriteAnswerRegex=new RegExp("(?<=\\()("+a.join("|")+")(?=\\))","g")}static get answerKeys(){return this._answerKeys}constructor(a){this.seed=a}shuffleAnswers(a,b){if(!AnswerShuffler$$module$build$utils$old_shuffle_answers.isShuffleAble(a))return{answers:a,key:b};if(!AnswerShuffler$$module$build$utils$old_shuffle_answers.allowRewrite)return this.answerShuffleNoRewrite(a,b);throw Error("Not implemented");
}answerShuffleNoRewrite(a,b){const c=a[b],d=a.map((f,g)=>g).filter(f=>!AnswerShuffler$$module$build$utils$old_shuffle_answers.isPositionalAnswer(a[f]));shuffle$$module$build$utils$random(d,this.seed,!0);b=a.map((f,g)=>a[d[g]]||f);const e=b.findIndex(f=>f===c);if(0>e||e>=b.length)throw Error("Could not find answer key");return{answers:b,key:e}}static answerRequiresRewrite(a){return AnswerShuffler$$module$build$utils$old_shuffle_answers.rewriteAnswerRegex.test(a)}static isPositionalAnswer(a){return/of the (?:above|below)/i.test(a)}static isShuffleAble(a){if(!AnswerShuffler$$module$build$utils$old_shuffle_answers.allowRewrite&&
a.some(b=>AnswerShuffler$$module$build$utils$old_shuffle_answers.answerRequiresRewrite(b))||2>a.length)return!1;a=a.map(b=>AnswerShuffler$$module$build$utils$old_shuffle_answers.isPositionalAnswer(b)?"1":"0").join("");return/^1*00+1*$/.test(a)}static rewriteAnswer(a,b){const c=new RegExp("(?<=\\()("+Object.keys(b).join("|")+")(?=\\))","g");return a.replace(c,d=>b[d])}static applySwapValues(a,b,c){for(const [d,e]of Object.entries(c))b[d]=a[e];return b}static symmetricDifference(a,b){a=new Set(a);for(let c of b)a.has(c)?
a.delete(c):a.add(c);return a}static invertDict(a){return Object.fromEntries(Object.entries(a).map(([b,c])=>[c,b]))}static swapValues(a,b,c=!0){if(!Object.keys(b).every(f=>f in a))throw Error("mapping contains keys that are not in the object");const d=Array.from(new Set(Object.values(b))),e=Array.from(new Set(Object.keys(b)));if(0!==symmetricDifference$$module$build$utils$old_shuffle_answers(new Set(d),new Set(e)).size)throw Error("mapping contains duplicate values");return Object.entries(b).every(([f,
g])=>a[f]===a[g])?a:c?applySwapValues$$module$build$utils$old_shuffle_answers({...a},a,b):applySwapValues$$module$build$utils$old_shuffle_answers(a,{...a},b)}}AnswerShuffler$$module$build$utils$old_shuffle_answers.rewriteAnswerRegex=new RegExp(/\([A-E]\)/,"g");AnswerShuffler$$module$build$utils$old_shuffle_answers._answerKeys=["A","B","C","D","E"];AnswerShuffler$$module$build$utils$old_shuffle_answers.allowRewrite=!1;
function applySwapValues$$module$build$utils$old_shuffle_answers(a,b,c){for(const [d,e]of Object.entries(c))b[d]=a[e];return b}function symmetricDifference$$module$build$utils$old_shuffle_answers(a,b){a=new Set(a);for(let c of b)a.has(c)?a.delete(c):a.add(c);return a}
function swapValues$$module$build$utils$old_shuffle_answers(a,b,c=!0){if(!Object.keys(b).every(f=>f in a))throw Error("mapping contains keys that are not in the object");const d=Array.from(new Set(Object.values(b))),e=Array.from(new Set(Object.keys(b)));if(0!==symmetricDifference$$module$build$utils$old_shuffle_answers(new Set(d),new Set(e)).size)throw Error("mapping contains duplicate values");return Object.entries(b).every(([f,g])=>a[f]===a[g])?a:c?applySwapValues$$module$build$utils$old_shuffle_answers({...a},
a,b):applySwapValues$$module$build$utils$old_shuffle_answers(a,{...a},b)}function invertDict$$module$build$utils$old_shuffle_answers(a){return Object.fromEntries(Object.entries(a).map(([b,c])=>[c,b]))}
function shuffleAnswers$$module$build$utils$old_shuffle_answers(a,b,c){if(!isShuffleAble$$module$build$utils$old_shuffle_answers(b))return{answers:b,key:c};const d=b.map((f,g)=>g).filter(f=>!isPositionalAnswer$$module$build$utils$old_shuffle_answers(b[f]));shuffle$$module$build$utils$random(d,a,!0);const e=Object.fromEntries(d.map((f,g)=>[f,g]));b.forEach((f,g)=>{void 0===e[g]&&(e[g]=g)});a=invertDict$$module$build$utils$old_shuffle_answers(e);return{answers:b.map((f,g)=>b[e[g]]),key:Number(a[c])}}
var module$build$utils$old_shuffle_answers={};module$build$utils$old_shuffle_answers.applySwapValues=applySwapValues$$module$build$utils$old_shuffle_answers;module$build$utils$old_shuffle_answers.isPositionalAnswer=isPositionalAnswer$$module$build$utils$old_shuffle_answers;module$build$utils$old_shuffle_answers.isShuffleAble=isShuffleAble$$module$build$utils$old_shuffle_answers;module$build$utils$old_shuffle_answers.shuffleAnswers=shuffleAnswers$$module$build$utils$old_shuffle_answers;
module$build$utils$old_shuffle_answers.swapValues=swapValues$$module$build$utils$old_shuffle_answers;module$build$utils$old_shuffle_answers.symmetricDifference=symmetricDifference$$module$build$utils$old_shuffle_answers;function shuffleValues$$module$build$utils$shuffle(a,b=randomString$$module$build$utils$random(),c=!0){if(c){for(c=Object.keys(a).length-1;0<c;c--){var d=Math.floor(random$$module$build$utils$random(b)*(c+1))%Object.keys(a).length;const f=Object.keys(a)[c];d=Object.keys(a)[d];[a[f],a[d]]=[a[d],a[f]];b=random$$module$build$utils$random(b).toString(36).substring(0,b.length)}return a}const e=shuffle$$module$build$utils$random(Object.values(a),b,!0);return Object.fromEntries(Object.keys(a).map((f,g)=>
[f,e[g]]))}function applySwapValues$$module$build$utils$shuffle(a,b,c){for(const [d,e]of Object.entries(c))b[d]=a[e];return b}function symmetricDifference$$module$build$utils$shuffle(a,b){a=new Set(a);for(let c of b)a.has(c)?a.delete(c):a.add(c);return a}
function swapValues$$module$build$utils$shuffle(a,b,c=!0){if(!Object.keys(b).every(f=>f in a))throw Error("mapping contains keys that are not in the object");const d=Array.from(new Set(Object.values(b))),e=Array.from(new Set(Object.keys(b)));if(0!==symmetricDifference$$module$build$utils$shuffle(new Set(d),new Set(e)).size)throw Error("mapping contains duplicate values");return Object.entries(b).every(([f,g])=>a[f]===a[g])?a:c?applySwapValues$$module$build$utils$shuffle({...a},a,b):applySwapValues$$module$build$utils$shuffle(a,
{...a},b)}function invertDict$$module$build$utils$shuffle(a){return Object.fromEntries(Object.entries(a).map(([b,c])=>[c,b]))}function isPositionalAnswer$$module$build$utils$shuffle(a){return/of the (?:above|below)/i.test(a)}function isShuffleAble$$module$build$utils$shuffle(a){if(2>a.length)return!1;a=a.map(b=>isPositionalAnswer$$module$build$utils$shuffle(b)?"1":"0").join("");return/^1*00+1*$/.test(a)}
function shuffleAble$$module$build$utils$shuffle(a){return a.length&&!isPositionalAnswer$$module$build$utils$shuffle(a)}function rewriteAnswer$$module$build$utils$shuffle(a,b){const c=new RegExp("(?<=\\()("+Object.keys(b).join("|")+")(?=\\))","g");return a.replace(c,d=>b[d])}
function shuffleSpecificValues$$module$build$utils$shuffle(a,b,c){c=c.reduce((d,e)=>{d[e]=e;return d},{});shuffleValues$$module$build$utils$shuffle(c,a,!0);return{result:swapValues$$module$build$utils$shuffle(b,c),returnMap:c}}
function shuffleAnswers2$$module$build$utils$shuffle(a,b,c=["A","B","C","D","E"]){const d=shuffleValues$$module$build$utils$shuffle(Object.fromEntries(c.filter(g=>shuffleAble$$module$build$utils$shuffle(b[g])).map(g=>[g,g])),a);if(2>Object.keys(d).length)return b;const e=invertDict$$module$build$utils$shuffle(d),f={...b};c.forEach(g=>f[g]=rewriteAnswer$$module$build$utils$shuffle(b[e[g]]||b[g],d));return f}
function shuffleAnswers$$module$build$utils$shuffle(a,b,c,d=["A","B","C","D","E"]){const e=Object.fromEntries(Object.entries(b).map(([h,l])=>["ABCDEFGHIJKLMNOPQRSTUVWXYZ"[h],l]));console.log("answerDict",e);const f=shuffleValues$$module$build$utils$shuffle(Object.fromEntries(b.filter(h=>shuffleAble$$module$build$utils$shuffle(e[h])).map(h=>[h,h])),a,!1);console.log("answerMap",f);if(2>Object.keys(f).length)return{answers:b,key:c};const g=invertDict$$module$build$utils$shuffle(f);console.log("invertedAnswerMap",
g);const k={...e};d=d.slice(0,b.length);a=d.findIndex(h=>h===e["ABCDEFGHIJKLMNOPQRSTUVWXYZ"[c]]);console.log("newKey",a);d.forEach(h=>k[h]=rewriteAnswer$$module$build$utils$shuffle(e[g[h]]||e[h],f));console.log("newAnswers",k);return{answers:Object.values(k),key:a}}var module$build$utils$shuffle={};module$build$utils$shuffle.shuffleAnswers=shuffleAnswers$$module$build$utils$shuffle;module$build$utils$shuffle.shuffleAnswers2=shuffleAnswers2$$module$build$utils$shuffle;
module$build$utils$shuffle.shuffleSpecificValues=shuffleSpecificValues$$module$build$utils$shuffle;module$build$utils$shuffle.shuffleValues=shuffleValues$$module$build$utils$shuffle;module$build$utils$shuffle.swapValues=swapValues$$module$build$utils$shuffle;})()
//# sourceMappingURL=script.js.map
